{"version":3,"sources":["card-container-component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardContainer","props","className","onDragOver","event","dragOver","onDrop","drop","category","task","App","handleDragOver","preventDefault","handleDragStart","name","dataTransfer","setData","handleDrop","cat","id","getData","tasks","state","filter","setState","handleKeyUp","key","target","value","categories","todo","working","complete","trash","this","forEach","push","draggable","onDragStart","onKeyUp","type","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAgBeA,EAdO,SAACC,GACrB,OACE,yBACEC,UAAY,iBACZC,WAAc,SAAAC,GAAK,OAAIH,EAAMI,SAASD,IACtCE,OAAU,SAAAF,GAAK,OAAIH,EAAMM,KAAKH,EAAOH,EAAMO,YAE7C,4BAAKP,EAAMO,UACRP,EAAMQ,OC+GEC,E,YArHb,aAAc,IAAD,8BACX,+CAaFC,eAAiB,SAAAP,GACfA,EAAMQ,kBAfK,EAkBbC,gBAAkB,SAACT,EAAOU,GACxBV,EAAMW,aAAaC,QAAQ,KAAMF,IAnBtB,EAsBbG,WAAa,SAACb,EAAOc,GACnB,IAAMC,EAAKf,EAAMW,aAAaK,QAAQ,MAElCC,EAAQ,EAAKC,MAAMD,MAAME,QAAO,SAAAd,GAIlC,OAHIA,EAAKK,OAASK,IAChBV,EAAKD,SAAWU,GAEXT,KAET,EAAKe,SAAL,eACK,EAAKF,MADV,CAEED,YAjCS,EAqCbI,YAAc,SAAArB,GACO,UAAdA,EAAMsB,KAA4C,KAAvBtB,EAAMuB,OAAOC,QAC3C,EAAKJ,SAAS,CACZH,MAAM,GAAD,mBACA,EAAKC,MAAMD,OADX,CAEH,CAAEP,KAAMV,EAAMuB,OAAOC,MAAOpB,SAAU,YAG1CJ,EAAMuB,OAAOC,MAAQ,IAEL,WAAdxB,EAAMsB,MACRtB,EAAMuB,OAAOC,MAAQ,KA9CvB,EAAKN,MAAQ,CACXD,MAAO,CACL,CACEP,KAAM,iBACNN,SAAU,UANL,E,sEAsDH,IAAD,OACHqB,EAAa,CACfC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,MAAO,IAgBT,OAbAC,KAAKZ,MAAMD,MAAMc,SAAQ,SAAA1B,GACvBoB,EAAWpB,EAAKD,UAAU4B,KACxB,yBACElC,UAAY,iBACZwB,IAAOjB,EAAKK,KACZuB,WAAS,EACTC,YAAe,SAAAlC,GAAK,OAAI,EAAKS,gBAAgBT,EAAOK,EAAKK,QAExDL,EAAKK,UAMV,6BACE,yBAAKK,GAAK,qBACV,6CACA,yBAAKjB,UAAY,aACf,kBAAC,EAAD,CACAG,SAAY6B,KAAKvB,eACjBJ,KAAQ2B,KAAKjB,WACbT,SAAW,OACXC,KAAQoB,EAAWC,OACnB,kBAAC,EAAD,CACAzB,SAAY6B,KAAKvB,eACjBJ,KAAQ2B,KAAKjB,WACbT,SAAW,UACXC,KAAQoB,EAAWE,UACnB,kBAAC,EAAD,CACA1B,SAAY6B,KAAKvB,eACjBJ,KAAQ2B,KAAKjB,WACbT,SAAW,WACXC,KAAQoB,EAAWG,YAErB,6BACE,2BACEO,QAAW,SAAAnC,GAAK,OAAI,EAAKqB,YAAYrB,IACrCF,UAAY,QACZiB,GAAK,YACLqB,KAAO,OACPC,YAAc,mBAEhB,yBACEvC,UAAY,aACZI,OAAU,SAAAF,GAAK,OAAI,EAAKa,WAAWb,EAAO,UAC1CD,WAAc,SAAAC,GAAK,OAAI,EAAKO,eAAeP,KAH7C,6B,GAzGQsC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c31e1729.chunk.js","sourcesContent":["import React from 'react';\n\nconst CardContainer = (props) => {\n  return (\n    <div\n      className = \"card-container\"\n      onDragOver = {event => props.dragOver(event)}\n      onDrop = {event => props.drop(event, props.category)}\n    >\n    <h1>{props.category}</h1>\n      {props.task}\n    </div>\n    );\n\n}\n\nexport default CardContainer;","import React, {Component} from 'react';\nimport CardContainer from './card-container-component';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      tasks: [\n        {\n          name: \"Add More Tasks\",\n          category: \"todo\"\n        }\n      ]\n    }\n\n  }\n   \n\n  handleDragOver = event => {\n    event.preventDefault();\n  };\n\n  handleDragStart = (event, name) => {\n    event.dataTransfer.setData(\"id\", name);\n  };\n\n  handleDrop = (event, cat) => {\n    const id = event.dataTransfer.getData(\"id\");\n\n    let tasks = this.state.tasks.filter(task => {\n      if (task.name === id) {\n        task.category = cat;\n      }\n      return task;\n    });\n    this.setState({\n      ...this.state,\n      tasks\n    });\n  };\n\n  handleKeyUp = event => {\n    if ((event.key === \"Enter\") && (event.target.value !== \"\")) {\n      this.setState({\n        tasks: [\n          ...this.state.tasks,\n          { name: event.target.value, category: \"todo\" }\n        ]\n      });\n      event.target.value = \"\";\n    }\n    if (event.key === 'Escape') {\n      event.target.value = \"\";\n    }\n    // console.log(event.target.value)\n  };\n\n\n  render() {\n    var categories = {\n      todo: [],\n      working: [],\n      complete: [],\n      trash: []\n    };\n\n    this.state.tasks.forEach(task => {\n      categories[task.category].push(\n        <div\n          className = \"item-container\"\n          key = {task.name}\n          draggable\n          onDragStart = {event => this.handleDragStart(event, task.name)}\n        >\n          {task.name}\n        </div>\n      );\n    });   \n\n    return (\n      <div>\n        <div id = 'background-image'></div>\n        <nav>Trello Clone</nav>\n        <div className = \"container\">\n          <CardContainer \n          dragOver = {this.handleDragOver}\n          drop = {this.handleDrop} \n          category = 'todo' \n          task = {categories.todo}/>\n          <CardContainer \n          dragOver = {this.handleDragOver}\n          drop = {this.handleDrop} \n          category = 'working' \n          task = {categories.working}/>\n          <CardContainer \n          dragOver = {this.handleDragOver}\n          drop = {this.handleDrop} \n          category = 'complete' \n          task = {categories.complete}/>\n        </div>\n        <div>\n          <input\n            onKeyUp = {event => this.handleKeyUp(event)}\n            className = \"input\"\n            id = 'inputText'\n            type = \"text\"\n            placeholder = \"Enter the task\"\n          />\n          <div\n            className = \"trash-drop\"\n            onDrop = {event => this.handleDrop(event, \"trash\")}\n            onDragOver = {event => this.handleDragOver(event)}\n          >\n            Drop here to remove\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}